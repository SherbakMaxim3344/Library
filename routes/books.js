import express from 'express';
const router = express.Router();
import libraryStorage from '../storage/libraryStorage.js';

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–Ω–∏–≥ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
router.get('/', (req, res) => {
  let books = libraryStorage.getAllBooks();
  const filter = req.query.filter || 'all';
  const sort = req.query.sort || 'title';

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
  switch (filter) {
    case 'available':
      books = libraryStorage.getAvailableBooks();
      break;
    case 'borrowed':
      books = libraryStorage.getBorrowedBooks();
      break;
    case 'expiring':
      books = libraryStorage.getExpiringBooks();
      break;
    default:
      books = libraryStorage.getAllBooks();
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
  books.sort((a, b) => {
    switch (sort) {
      case 'title':
        return a.title.localeCompare(b.title);
      case 'author':
        return a.author.localeCompare(b.author);
      case 'year':
        return b.year - a.year;
      case 'dueDate':
        return new Date(a.dueDate || '9999-12-31') - new Date(b.dueDate || '9999-12-31');
      default:
        return 0;
    }
  });

  const stats = libraryStorage.getStatistics();
  
  res.render('books', {
    title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏',
    books: books,
    statistics: stats,
    filter: filter,
    sort: sort,
    message: `–ù–∞–π–¥–µ–Ω–æ ${books.length} –∫–Ω–∏–≥`
  });
});

// AJAX endpoint –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–Ω–∏–≥
router.get('/api/filter', (req, res) => {
  let books = libraryStorage.getAllBooks();
  const filter = req.query.filter || 'all';
  const sort = req.query.sort || 'title';

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
  switch (filter) {
    case 'available':
      books = libraryStorage.getAvailableBooks();
      break;
    case 'borrowed':
      books = libraryStorage.getBorrowedBooks();
      break;
    case 'expiring':
      books = libraryStorage.getExpiringBooks();
      break;
    default:
      books = libraryStorage.getAllBooks();
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
  books.sort((a, b) => {
    switch (sort) {
      case 'title':
        return a.title.localeCompare(b.title);
      case 'author':
        return a.author.localeCompare(b.author);
      case 'year':
        return b.year - a.year;
      case 'dueDate':
        return new Date(a.dueDate || '9999-12-31') - new Date(b.dueDate || '9999-12-31');
      default:
        return 0;
    }
  });

  const statistics = libraryStorage.getStatistics();

  res.json({
    books: books,
    statistics: statistics,
    message: `–ù–∞–π–¥–µ–Ω–æ ${books.length} –∫–Ω–∏–≥`
  });
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–∏–≥–∏
router.get('/:id', (req, res) => {
  res.redirect('/books');
});

// –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
router.get('/add/new', (req, res) => {
  res.render('add-book', {
    title: '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É'
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
router.post('/add', (req, res) => {
  const { title, author, year, genre } = req.body;
  
  if (title && author && year && genre) {
    const newBook = libraryStorage.addBook({
      title,
      author, 
      year: parseInt(year),
      genre
    });
    
    if (newBook) {
      res.redirect('/books?added=true');
    } else {
      res.render('error', {
        title: '–û—à–∏–±–∫–∞',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É'
      });
    }
  } else {
    res.render('error', {
      title: '–û—à–∏–±–∫–∞',
      message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
    });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏
router.post('/:id/delete', (req, res) => {
  const success = libraryStorage.deleteBook(req.params.id);
  
  if (success) {
    res.json({ success: true, message: '–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' });
  } else {
    res.status(404).json({ success: false, message: '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
});

// –í—ã–¥–∞—Ç—å –∫–Ω–∏–≥—É - –° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú
router.post('/:id/borrow', (req, res) => {
  const { borrower, readerEmail, readerPhone, dueDate } = req.body;
  
  console.log('=== üìö –í–´–î–ê–ß–ê –ö–ù–ò–ì–ò ===');
  console.log('ID –∫–Ω–∏–≥–∏:', req.params.id);
  console.log('–î–∞–Ω–Ω—ã–µ —á–∏—Ç–∞—Ç–µ–ª—è:', { borrower, readerEmail, readerPhone, dueDate });
  
  if (!borrower || !dueDate) {
    console.log('‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    return res.status(400).json({ 
      success: false, 
      message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' 
    });
  }
  
  const success = libraryStorage.borrowBook(
    req.params.id, 
    borrower, 
    dueDate,
    readerEmail,
    readerPhone
  );
  
  console.log('üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–¥–∞—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', success);
  
  if (success) {
    res.json({ success: true, message: '–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞' });
  } else {
    res.status(400).json({ 
      success: false, 
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –∫–Ω–∏–≥—É' 
    });
  }
});

// –í–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É
router.post('/:id/return', (req, res) => {
  const success = libraryStorage.returnBook(req.params.id);
  
  if (success) {
    res.json({ success: true, message: '–ö–Ω–∏–≥–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É' });
  } else {
    res.status(400).json({ 
      success: false, 
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É' 
    });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏
router.post('/:id/update', (req, res) => {
  const { title, author, year, genre } = req.body;
  
  if (!title || !author || !year || !genre) {
    return res.status(400).json({ 
      success: false, 
      message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
    });
  }
  
  const success = libraryStorage.updateBook(req.params.id, {
    title,
    author,
    year: parseInt(year),
    genre
  });
  
  if (success) {
    res.json({ success: true, message: '–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  } else {
    res.status(404).json({ 
      success: false, 
      message: '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
    });
  }
});

export default router;