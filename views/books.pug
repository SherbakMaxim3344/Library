html
  head
    meta(charset="utf-8")
    title= title
    link(rel="stylesheet", href="/public/css/style.css")
    link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css")
    style.
      .loading {
        text-align: center;
        padding: 2rem;
        color: #666;
      }
      .loading i {
        font-size: 2rem;
        margin-bottom: 1rem;
      }
      .no-books {
        text-align: center;
        padding: 3rem;
        color: #666;
        grid-column: 1 / -1;
      }
      .no-books i {
        font-size: 3rem;
        color: #ccc;
        margin-bottom: 1rem;
      }
  body.books-page 
    header
      h1
        i.fas.fa-book
        |  #{title}
      nav
        a(href="/")
          i.fas.fa-home
          |  Главная
        a(href="/books")
          i.fas.fa-list
          |  Все книги
        a(href="/books/add/new")
          i.fas.fa-plus-circle
          |  Добавить книгу
    
    main
      //- Статистика
      .library-stats
        h2
          i.fas.fa-chart-bar
          |  Статистика библиотеки
        .stats-grid
          .stat-item
            i.fas.fa-book.total
            .stat-info
              .stat-number#totalBooks #{statistics.totalBooks}
              .stat-label Всего книг
          .stat-item
            i.fas.fa-check-circle.available
            .stat-info
              .stat-number#availableBooks #{statistics.availableBooks}
              .stat-label Доступно
          .stat-item
            i.fas.fa-user-check.borrowed
            .stat-info
              .stat-number#borrowedBooks #{statistics.borrowedBooks}
              .stat-label Выдано
          .stat-item
            i.fas.fa-clock.expiring
            .stat-info
              .stat-number#expiringBooks #{statistics.expiringBooks}
              .stat-label Скоро срок

      //- Фильтры и сортировка
      .filters-section
        h3
          i.fas.fa-filter
          |  Фильтры и сортировка
        
        .filter-controls
          .filter-group
            label
              i.fas.fa-filter
              |  Фильтр:
            select#filterSelect
              option(value="all" selected=filter === 'all') Все книги
              option(value="available" selected=filter === 'available') Доступные
              option(value="borrowed" selected=filter === 'borrowed') Выданные
              option(value="expiring" selected=filter === 'expiring') Скоро срок
            
          .sort-group
            label
              i.fas.fa-sort
              |  Сортировка:
            select#sortSelect
              option(value="title" selected=sort === 'title') По названию
              option(value="author" selected=sort === 'author') По автору
              option(value="year" selected=sort === 'year') По году
              option(value="dueDate" selected=sort === 'dueDate') По дате возврата

      //- Список книг
      .books-section
        h3#booksTitle
          i.fas.fa-books
          |  #{message}
        
        .books-container#booksContainer
          each book in books
            - const safeTitle = book.title.replace(/'/g, "\\'")
            - const safeAuthor = book.author.replace(/'/g, "\\'")
            - const safeGenre = book.genre.replace(/'/g, "\\'")
            .book-card(id=`book-${book.id}`)
              .book-header
                h4
                  i.fas.fa-book
                  |  #{book.title}
                .book-actions
                  if book.isAvailable
                    span.status.available
                      i.fas.fa-check-circle
                      |  Доступна
                  else
                    span.status.borrowed
                      i.fas.fa-user-clock
                      |  Выдана: #{book.borrower}
                  
                  .action-buttons
                    button.btn.btn-info(onclick=`showBookDetails(${JSON.stringify(book).replace(/'/g, "\\'")})` title="Подробнее")
                      i.fas.fa-info
                    button.btn.btn-warning(onclick=`showEditDialog('${book.id}', '${safeTitle}', '${safeAuthor}', '${book.year}', '${safeGenre}')` title="Редактировать книгу")
                      i.fas.fa-edit
                    if book.isAvailable
                      button.btn.btn-success(onclick=`showBorrowDialog('${book.id}', '${safeTitle}')` title="Выдать книгу")
                        i.fas.fa-hand-holding
                    else
                      button.btn.btn-info(onclick=`showReaderInfo(${JSON.stringify(book).replace(/'/g, "\\'")})` title="Информация о читателе")
                        i.fas.fa-user
                      button.btn.btn-warning(onclick=`returnBook('${book.id}')` title="Вернуть книгу")
                        i.fas.fa-undo
                    button.btn.btn-danger(onclick=`showDeleteConfirmDialog('${book.id}', '${safeTitle}')` title="Удалить книгу")
                      i.fas.fa-trash

              .book-details
                p
                  i.fas.fa-user-edit
                  |  Автор: #{book.author}
                p
                  i.fas.fa-calendar
                  |  Год: #{book.year}
                p
                  i.fas.fa-tag
                  |  Жанр: #{book.genre}
                
                if !book.isAvailable && book.dueDate
                  p
                    i.fas.fa-clock
                    |  Вернуть до: #{book.dueDate}
                    span.urgent(data-due-date=book.dueDate) (Срочно!)

//- Модальное окно для информации о книге
dialog#bookInfoDialog.modal
  .modal-content
    .modal-header
      h3.modal-title
        i.fas.fa-info-circle
        |  Информация о книге
      button.close(type="button" onclick="closeBookInfoDialog()") &times;
    
    .book-info-content#bookInfoContent
      //- Содержимое заполняется через JavaScript

    .modal-actions
      button.btn.btn-primary(type="button" onclick="closeBookInfoDialog()")
        i.fas.fa-check
        |  Закрыть

//- Модальное окно для редактирования книги
dialog#editBookDialog.modal
  .modal-content
    .modal-header
      h3.modal-title
        i.fas.fa-edit
        |  Редактировать книгу
      button.close(type="button" onclick="closeEditBookDialog()") &times;
    
    form#editBookForm
      input(type="hidden", id="editBookId")
      
      .form-group
        label(for="editTitle")
          i.fas.fa-book
          |  Название книги:
        input(type="text", id="editTitle", name="title", required, placeholder="Введите название книги")
      
      .form-group
        label(for="editAuthor")
          i.fas.fa-user-edit
          |  Автор:
        input(type="text", id="editAuthor", name="author", required, placeholder="Введите автора")
      
      .form-group
        label(for="editYear")
          i.fas.fa-calendar
          |  Год издания:
        input(type="number", id="editYear", name="year", required, placeholder="2024", min="1000", max="2030")
      
      .form-group
        label(for="editGenre")
          i.fas.fa-tag
          |  Жанр:
        input(type="text", id="editGenre", name="genre", required, placeholder="Введите жанр")
      
      .modal-actions
        button.btn.btn-secondary(type="button" onclick="closeEditBookDialog()")
          i.fas.fa-times
          |  Отмена
        button.btn.btn-success(type="submit")
          i.fas.fa-check
          |  Сохранить изменения

//- Модальное окно для подтверждения удаления книги
dialog#deleteConfirmDialog.modal
  .modal-content
    .modal-header
      h3.modal-title
        i.fas.fa-exclamation-triangle
        |  Подтверждение удаления
      button.close(type="button" onclick="closeDeleteConfirmDialog()") &times;
    
    .delete-confirm-content
      .warning-icon
        i.fas.fa-trash-alt
      .warning-message
        h4#deleteBookTitle
        p Вы уверены, что хотите удалить эту книгу из библиотеки?
        .warning-note
          i.fas.fa-exclamation-circle
          | Это действие нельзя отменить!
    
    .modal-actions
      button.btn.btn-secondary(type="button" onclick="closeDeleteConfirmDialog()")
        i.fas.fa-times
        |  Отмена
      button.btn.btn-danger(type="button" onclick="confirmDeleteAction()")
        i.fas.fa-trash
        |  Удалить книгу
        
//- Модальное окно для выдачи книги
dialog#borrowDialog.modal
  .modal-content
    .modal-header
      h3.modal-title
        i.fas.fa-hand-holding
        |  Выдать книгу читателю
      button.close(type="button" onclick="closeBorrowDialog()") &times;
    
    form#borrowForm
      input(type="hidden", id="borrowBookId")
      
      .form-group
        label(for="readerName")
          i.fas.fa-user
          |  ФИО читателя:
        input(type="text", id="readerName", name="readerName", required, placeholder="Введите полное имя читателя")
      
      .form-group
        label(for="readerEmail")
          i.fas.fa-envelope
          |  Email читателя:
        input(type="email", id="readerEmail", name="readerEmail", placeholder="email@example.com")
      
      .form-group
        label(for="readerPhone")
          i.fas.fa-phone
          |  Телефон читателя:
        input(type="tel", id="readerPhone", name="readerPhone", placeholder="+7 (999) 999-99-99")
      
      .form-group
        label(for="dueDate")
          i.fas.fa-calendar
          |  Дата возврата:
        input(type="date", id="dueDate", name="dueDate", required)
      
      .modal-actions
        button.btn.btn-secondary(type="button" onclick="closeBorrowDialog()")
          i.fas.fa-times
          |  Отмена
        button.btn.btn-success(type="submit")
          i.fas.fa-check
          |  Выдать книгу

//- Модальное окно для просмотра информации о читателе
dialog#readerInfoDialog.modal
  .modal-content
    .modal-header
      h3.modal-title
        i.fas.fa-user-circle
        |  Информация о читателе
      button.close(type="button" onclick="closeReaderInfoDialog()") &times;
    
    .reader-info
      .info-item
        strong
          i.fas.fa-book
          |  Книга:
        span#infoBookTitle
      .info-item
        strong
          i.fas.fa-user
          |  Читатель:
        span#infoReaderName
      .info-item
        strong
          i.fas.fa-envelope
          |  Email:
        span#infoReaderEmail
      .info-item
        strong
          i.fas.fa-phone
          |  Телефон:
        span#infoReaderPhone
      .info-item
        strong
          i.fas.fa-calendar-check
          |  Дата выдачи:
        span#infoBorrowDate
      .info-item
        strong
          i.fas.fa-calendar-times
          |  Вернуть до:
        span#infoDueDate
    
    .modal-actions
      button.btn.btn-primary(type="button" onclick="closeReaderInfoDialog()")
        i.fas.fa-check
        |  Закрыть

script.
  //- Переменная для хранения данных текущей книги
  let currentBookData = null;
  //- Переменные для удаления
  let bookToDelete = null;
  
  //- Инициализация при загрузке страницы
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Страница книг загружена');
    
    // Добавляем обработчики изменений для фильтров
    document.getElementById('filterSelect').addEventListener('change', applyFilters);
    document.getElementById('sortSelect').addEventListener('change', applyFilters);
    
    // Добавляем обработчик формы редактирования
    document.getElementById('editBookForm').addEventListener('submit', handleEditBook);
    
    // Обработчик формы выдачи книги
    const borrowForm = document.getElementById('borrowForm');
    if (borrowForm) {
      borrowForm.addEventListener('submit', handleBorrowBook);
      console.log('Обработчик формы выдачи книги добавлен');
    } else {
      console.error('Форма выдачи книги не найдена!');
    }
    
    // Обновляем срочные метки
    updateUrgentLabels();
  });
  
  //- Функция для показа диалога удаления
  function showDeleteConfirmDialog(bookId, bookTitle) {
    bookToDelete = bookId;
    const dialog = document.getElementById('deleteConfirmDialog');
    document.getElementById('deleteBookTitle').textContent = `"${bookTitle}"`;
    dialog.showModal();
  }
  
  //- Функция для закрытия диалога удаления
  function closeDeleteConfirmDialog() {
    const dialog = document.getElementById('deleteConfirmDialog');
    dialog.close();
    bookToDelete = null;
  }
  
  //- Функция для подтверждения удаления
  function confirmDeleteAction() {
    if (!bookToDelete) return;
    
    fetch(`/books/${bookToDelete}/delete`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Ошибка сервера');
      }
      return response.json();
    })
    .then(data => {
      // ВСЕГДА закрываем диалог и обновляем список, независимо от сообщения с сервера
      closeDeleteConfirmDialog();
      applyFilters();
    })
    .catch(error => {
      console.error('Ошибка при удалении:', error);
      closeDeleteConfirmDialog();
      applyFilters();
    });
  }
  
  //- Обработка выдачи книги
  function handleBorrowBook(e) {
    e.preventDefault();
    
    const bookId = document.getElementById('borrowBookId').value;
    const readerName = document.getElementById('readerName').value.trim();
    const readerEmail = document.getElementById('readerEmail').value.trim();
    const readerPhone = document.getElementById('readerPhone').value.trim();
    const dueDate = document.getElementById('dueDate').value;
    
    // Валидация
    if (!readerName) {
      alert('Пожалуйста, введите ФИО читателя');
      document.getElementById('readerName').focus();
      return;
    }
    
    if (!dueDate) {
      alert('Пожалуйста, выберите дату возврата');
      document.getElementById('dueDate').focus();
      return;
    }
    
    // Проверяем, что дата возврата не в прошлом
    const today = new Date().toISOString().split('T')[0];
    if (dueDate < today) {
      alert('Дата возврата не может быть в прошлом');
      document.getElementById('dueDate').focus();
      return;
    }
    
    // Отправка данных на сервер
    fetch(`/books/${bookId}/borrow`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        borrower: readerName,
        readerEmail: readerEmail,
        readerPhone: readerPhone,
        dueDate: dueDate
      })
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Ошибка сервера');
      }
      return response.json();
    })
    .then(data => {
      closeBorrowDialog();
      applyFilters();
    })
    .catch(error => {
      console.error('Ошибка при выдаче книги:', error);
      closeBorrowDialog();
      applyFilters();
    });
  }
  
  //- Функция для применения фильтров через AJAX
  function applyFilters() {
    const filter = document.getElementById('filterSelect').value;
    const sort = document.getElementById('sortSelect').value;
    
    // Показываем индикатор загрузки
    showLoading();
    
    // AJAX запрос для фильтрации
    fetch(`/books/api/filter?filter=${filter}&sort=${sort}`)
      .then(response => response.json())
      .then(data => {
        // Обновляем статистику
        updateStatistics(data.statistics);
        // Обновляем список книг
        updateBooksContainer(data.books);
        // Обновляем заголовок
        updateBooksTitle(data.message);
      })
      .catch(error => {
        console.error('Ошибка фильтрации:', error);
        // При ошибке - перезагружаем страницу старым способом
        window.location.href = `/books?filter=${filter}&sort=${sort}`;
      })
      .finally(() => {
        hideLoading();
      });
  }
  
  //- Функция для обновления статистики
  function updateStatistics(statistics) {
    document.getElementById('totalBooks').textContent = statistics.totalBooks;
    document.getElementById('availableBooks').textContent = statistics.availableBooks;
    document.getElementById('borrowedBooks').textContent = statistics.borrowedBooks;
    document.getElementById('expiringBooks').textContent = statistics.expiringBooks;
  }
  
  //- Функция для обновления заголовка
  function updateBooksTitle(message) {
    document.getElementById('booksTitle').innerHTML = `<i class="fas fa-books"></i> ${message}`;
  }
  
  //- Функция для обновления контейнера с книгами
  function updateBooksContainer(books) {
    const container = document.getElementById('booksContainer');
    
    if (books.length === 0) {
      container.innerHTML = `
        <div class="no-books">
          <i class="fas fa-book-open"></i>
          <p>Книги не найдены</p>
        </div>
      `;
      return;
    }
    
    const booksHTML = books.map(book => {
      const safeTitle = book.title.replace(/'/g, "\\'");
      const safeAuthor = book.author.replace(/'/g, "\\'");
      const safeGenre = book.genre.replace(/'/g, "\\'");
      
      return `
        <div class="book-card" id="book-${book.id}">
          <div class="book-header">
            <h4>
              <i class="fas fa-book"></i> ${book.title}
            </h4>
            <div class="book-actions">
              ${book.isAvailable ? 
                `<span class="status available">
                  <i class="fas fa-check-circle"></i> Доступна
                </span>` : 
                `<span class="status borrowed">
                  <i class="fas fa-user-clock"></i> Выдана: ${book.borrower || 'Не указано'}
                </span>`
              }
              
              <div class="action-buttons">
                <button class="btn btn-info" onclick="showBookDetails(${JSON.stringify(book).replace(/'/g, "\\'")})" title="Подробнее">
                  <i class="fas fa-info"></i>
                </button>
                <button class="btn btn-warning" onclick="showEditDialog('${book.id}', '${safeTitle}', '${safeAuthor}', '${book.year}', '${safeGenre}')" title="Редактировать книгу">
                  <i class="fas fa-edit"></i>
                </button>
                ${book.isAvailable ? 
                  `<button class="btn btn-success" onclick="showBorrowDialog('${book.id}', '${safeTitle}')" title="Выдать книгу">
                    <i class="fas fa-hand-holding"></i>
                  </button>` : 
                  `<button class="btn btn-info" onclick="showReaderInfo(${JSON.stringify(book).replace(/'/g, "\\'")})" title="Информация о читателе">
                    <i class="fas fa-user"></i>
                  </button>
                  <button class="btn btn-warning" onclick="returnBook('${book.id}')" title="Вернуть книгу">
                    <i class="fas fa-undo"></i>
                  </button>`
                }
                <button class="btn btn-danger" onclick="showDeleteConfirmDialog('${book.id}', '${safeTitle}')" title="Удалить книгу">
                  <i class="fas fa-trash"></i>
                </button>
              </div>
            </div>
          </div>

          <div class="book-details">
            <p>
              <i class="fas fa-user-edit"></i> Автор: ${book.author}
            </p>
            <p>
              <i class="fas fa-calendar"></i> Год: ${book.year}
            </p>
            <p>
              <i class="fas fa-tag"></i> Жанр: ${book.genre}
            </p>
            ${!book.isAvailable && book.dueDate ? `
            <p>
              <i class="fas fa-clock"></i> Вернуть до: ${book.dueDate}
              <span class="urgent" data-due-date="${book.dueDate}">(Срочно!)</span>
            </p>
            ` : ''}
          </div>
        </div>
      `;
    }).join('');
    
    container.innerHTML = booksHTML;
    
    // Обновляем срочные метки после рендеринга
    updateUrgentLabels();
  }
  
  //- Функция для показа индикатора загрузки
  function showLoading() {
    const container = document.getElementById('booksContainer');
    container.innerHTML = `
      <div class="loading">
        <i class="fas fa-spinner fa-spin"></i>
        <p>Загрузка книг...</p>
      </div>
    `;
  }
  
  //- Функция для скрытия индикатора загрузки
  function hideLoading() {
    // Автоматически скрывается при обновлении контента
  }
  
  //- Функция для обновления срочных меток
  function updateUrgentLabels() {
    const urgentSpans = document.querySelectorAll('.urgent');
    urgentSpans.forEach(span => {
      const dueDate = span.getAttribute('data-due-date');
      if (!isExpiring(dueDate)) {
        span.style.display = 'none';
      }
    });
  }

  //- ФУНКЦИИ РЕДАКТИРОВАНИЯ КНИГ
  
  //- Показать диалог редактирования книги
  function showEditDialog(bookId, title, author, year, genre) {
    const dialog = document.getElementById('editBookDialog');
    
    // Заполняем форму данными книги
    document.getElementById('editBookId').value = bookId;
    document.getElementById('editTitle').value = title;
    document.getElementById('editAuthor').value = author;
    document.getElementById('editYear').value = year;
    document.getElementById('editGenre').value = genre;
    
    // Показываем диалог
    dialog.showModal();
  }
  
  //- Закрыть диалог редактирования книги
  function closeEditBookDialog() {
    const dialog = document.getElementById('editBookDialog');
    dialog.close();
  }
  
  //- Обработка формы редактирования книги
  function handleEditBook(e) {
    e.preventDefault();
    
    const bookId = document.getElementById('editBookId').value;
    const title = document.getElementById('editTitle').value.trim();
    const author = document.getElementById('editAuthor').value.trim();
    const year = document.getElementById('editYear').value.trim();
    const genre = document.getElementById('editGenre').value.trim();
    
    // Валидация
    if (!title || !author || !year || !genre) {
      alert('Пожалуйста, заполните все поля');
      return;
    }
    
    if (year < 1000 || year > 2030) {
      alert('Пожалуйста, введите корректный год (1000-2030)');
      document.getElementById('editYear').focus();
      return;
    }
    
    // Отправка данных на сервер
    fetch(`/books/${bookId}/update`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        title: title,
        author: author,
        year: year,
        genre: genre
      })
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Ошибка сервера');
      }
      return response.json();
    })
    .then(data => {
      closeEditBookDialog();
      applyFilters();
    })
    .catch(error => {
      console.error('Ошибка при редактировании:', error);
      closeEditBookDialog();
      applyFilters();
    });
  }

  //- ОСТАЛЬНЫЕ ФУНКЦИИ
  
  //- Показать информацию о книге
  function showBookDetails(book) {
    const dialog = document.getElementById('bookInfoDialog');
    const content = document.getElementById('bookInfoContent');
    
    const bookInfoHTML = `
      <div class="book-info">
        <div class="info-section">
          <h4>${book.title}</h4>
          <div class="info-grid">
            <div class="info-item">
              <strong><i class="fas fa-user-edit"></i> Автор:</strong>
              <span>${book.author}</span>
            </div>
            <div class="info-item">
              <strong><i class="fas fa-calendar"></i> Год издания:</strong>
              <span>${book.year}</span>
            </div>
            <div class="info-item">
              <strong><i class="fas fa-tag"></i> Жанр:</strong>
              <span>${book.genre}</span>
            </div>
            <div class="info-item">
              <strong><i class="fas fa-calendar-plus"></i> Добавлена:</strong>
              <span>${book.addedDate || 'Не указано'}</span>
            </div>
            <div class="info-item">
              <strong><i class="fas fa-check-circle"></i> Статус:</strong>
              <span>${book.isAvailable ? 'Доступна' : 'Выдана: ' + (book.borrower || 'Не указано')}</span>
            </div>
            ${!book.isAvailable && book.dueDate ? `
            <div class="info-item">
              <strong><i class="fas fa-clock"></i> Вернуть до:</strong>
              <span>${new Date(book.dueDate).toLocaleDateString('ru-RU')}</span>
              ${isExpiring(book.dueDate) ? '<span class="urgent">(Срочно!)</span>' : ''}
            </div>
            ` : ''}
            ${!book.isAvailable && book.readerEmail ? `
            <div class="info-item">
              <strong><i class="fas fa-envelope"></i> Email читателя:</strong>
              <span>${book.readerEmail}</span>
            </div>
            ` : ''}
            ${!book.isAvailable && book.readerPhone ? `
            <div class="info-item">
              <strong><i class="fas fa-phone"></i> Телефон читателя:</strong>
              <span>${book.readerPhone}</span>
            </div>
            ` : ''}
          </div>
        </div>
      </div>
    `;
    
    content.innerHTML = bookInfoHTML;
    dialog.showModal();
  }
  
  //- Закрыть диалог информации о книге
  function closeBookInfoDialog() {
    const dialog = document.getElementById('bookInfoDialog');
    dialog.close();
  }
  
  //- Показать диалог выдачи книги
  function showBorrowDialog(bookId, bookTitle) {
    const dialog = document.getElementById('borrowDialog');
    document.getElementById('borrowBookId').value = bookId;
    
    // Очищаем форму
    document.getElementById('readerName').value = '';
    document.getElementById('readerEmail').value = '';
    document.getElementById('readerPhone').value = '';
    document.getElementById('dueDate').value = '';
    
    // Устанавливаем минимальную дату - сегодня
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('dueDate').min = today;
    
    // Предустанавливаем дату возврата (например, через 14 дней)
    const twoWeeksLater = new Date();
    twoWeeksLater.setDate(twoWeeksLater.getDate() + 14);
    document.getElementById('dueDate').value = twoWeeksLater.toISOString().split('T')[0];
    
    // Показываем диалог
    dialog.showModal();
  }
  
  //- Закрыть диалог выдачи книги
  function closeBorrowDialog() {
    const dialog = document.getElementById('borrowDialog');
    dialog.close();
  }
  
  //- Показать информацию о читателе
  function showReaderInfo(book) {
    currentBookData = book;
    const dialog = document.getElementById('readerInfoDialog');
    
    // Заполняем информацию
    document.getElementById('infoBookTitle').textContent = book.title;
    document.getElementById('infoReaderName').textContent = book.borrower || 'Не указано';
    document.getElementById('infoReaderEmail').textContent = book.readerEmail || 'Не указано';
    document.getElementById('infoReaderPhone').textContent = book.readerPhone || 'Не указано';
    document.getElementById('infoBorrowDate').textContent = book.borrowedDate ? new Date(book.borrowedDate).toLocaleDateString('ru-RU') : new Date().toLocaleDateString('ru-RU');
    document.getElementById('infoDueDate').textContent = book.dueDate ? new Date(book.dueDate).toLocaleDateString('ru-RU') : 'Не указано';
    
    // Показываем диалог
    dialog.showModal();
  }
  
  //- Закрыть диалог информации о читателе
  function closeReaderInfoDialog() {
    const dialog = document.getElementById('readerInfoDialog');
    dialog.close();
  }
  
  //- Закрытие диалогов по клику на фон
  document.querySelectorAll('dialog').forEach(dialog => {
    dialog.addEventListener('click', (e) => {
      const dialogDimensions = dialog.getBoundingClientRect();
      if (
        e.clientX < dialogDimensions.left ||
        e.clientX > dialogDimensions.right ||
        e.clientY < dialogDimensions.top ||
        e.clientY > dialogDimensions.bottom
      ) {
        dialog.close();
      }
    });
  });
  
  function returnBook(bookId) {
    // Заменяем confirm на наше модальное окно или просто выполняем действие
    fetch(`/books/${bookId}/return`, {
      method: 'POST'
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Ошибка сервера');
      }
      return response.json();
    })
    .then(data => {
      applyFilters();
    })
    .catch(error => {
      console.error('Ошибка при возврате книги:', error);
      applyFilters();
    });
  }
  
  //- Функция для проверки срочности возврата (на клиенте)
  function isExpiring(dueDate) {
    if (!dueDate) return false;
    const now = new Date();
    const due = new Date(dueDate);
    const diffTime = due - now;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays <= 7 && diffDays > 0;
  }

  //- Функция для обновления срочных меток после загрузки страницы
  document.addEventListener('DOMContentLoaded', function() {
    const urgentSpans = document.querySelectorAll('.urgent');
    urgentSpans.forEach(span => {
      const dueDate = span.getAttribute('data-due-date');
      if (!isExpiring(dueDate)) {
        span.style.display = 'none';
      }
    });
  });